version: 2
jobs:
  build:
    working_directory: ~/code
    docker:
      - image: circleci/android:api-29-node
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
#      - run:
#         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
#         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: set ANDROID_SDK_ROOT
          command: |
            echo 'export ANDROID_SDK_ROOT=$HOME/android-tools'  >> $BASH_ENV

      - restore_cache:
          key: android=tools-v1-{{ checksum "install-android-tools.sh" }}-{{ arch }}
      - run:
          name: install android tools
          command: |
            sh install-android-tools.sh
            echo 'export PATH=$ANDROID_SDK_ROOT/tools/bin:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/tools:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/platform-tools:$PATH'  >> $BASH_ENV
            echo 'export PATH=$ANDROID_SDK_ROOT/emulator:$PATH'  >> $BASH_ENV
            source $BASH_ENV
            sdkmanager --list
      - save_cache:
          key: android=tools-v1-{{ checksum "install-android-tools.sh" }}-{{ arch }}
          paths:
            - /Users/distiller/android-tools
      - run:
          name: create AVD
          command: avdmanager create avd -n test -k "system-images;android-24;google_apis;x86_64"
      - run:
          name: start AVD
          command: emulator-headless -avd test -noaudio -no-boot-anim -no-window -accel auto -verbose
          background: true
      - run:
          name: wait for emulator
          command: adb wait-for-device shell 'while [[ -z $(getprop dev.bootcomplete) ]]; do sleep 1; done;'
      - run:
          name: Run EspressoTests
          command: |
            ./gradlew connectedDebugAndroidTest -PUSE_HEAD_TRACKING="false"
            sleep 30
            adb shell input keyevent 82
      - run:
          name: Build Debug Apk
          command: ./gradlew assembleDebug
      - run:
          name: Install AppCenter CLI
          command: sudo npm install -g appcenter-cli
      - run:
          name: Publish to AppCenter
          command: |
            appcenter login --token ${APP_CENTER_TOKEN}
            export apk="$(find ./app/build/outputs/apk/debug -regex '.*.apk')"
            appcenter distribute release -f ${apk} -g ${APP_CENTER_DISTRIBUTION_LIST} --app ${APP_CENTER_APP_NAME} -r "Android" --silent
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: app/build/test-results